;/*
; * essai-rc5-timer.c
; *
; * Created: 21/05/2018 11:03:25
; * Author: durant
; */
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <interrupt.h>
;	flags -> R17
;
;char  v=0;
;
;interrupt [TIM1_COMPA] void itTimer1(void) {
; 0000 000F interrupt [7] void itTimer1(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0010     v++;
;PCODE: $0000000F VOL: 0
; 0000 0011     PORTB= (4-(v%4));   // permet d avoir signal 1/4 sur bit 2
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0012 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;void main(void){
; 0000 0014 void main(void){
;PCODE: $00000019 VOL: 0
; 0000 0015     DDRB='\x07';
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0016     OCR1A=110;     // un entier
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0017     TCCR1B='\x08';      // WG12 a 1 pour mode timer CTC clear timer on compare
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0018     TIMSK='\x10';       // OCIE1A a 1 pour interruption sur compare match OCR1A
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0019     sei();              // autorise les iT
;PCODE: $00000022 VOL: 0
; 0000 001A     PORTB='\x01';       // met le bit 0 à 1
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 001B     TCCR1B='\x09';      // WG12 toujours a 1 ET demarre le timer avec CS=1 pas de diviseur
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001C     while(1)
;PCODE: $00000027 VOL: 0
; 0000 001D         ;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 001E }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
