;// dmx.c
;// fonctions d'envoi sur le dmx
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;char tabEnvoiDmx[6];      // start-code + 24 canaux dmx
;
;void initDmx( void ) {
; 0001 0009 void initDmx( void ) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 000A     char i;
; 0001 000B     DDRD ='\x02';
;PCODE: $0000000F VOL: 0
;	i -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0001 000C     PORTD='\x02';                   // pour dmx etat repos
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0001 000D     for( i=0; i<7; i++)           // raz tabEnvoiDmx
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 000E         tabEnvoiDmx[i]='\0';
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 000F }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;void initPortSerieDmx( void ) {
; 0001 0011 void initPortSerieDmx( void ) {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0012     UCSRB='\x08';           // active transmission
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0013     UCSRC='\x8E';           // asynchrone 2 bits de stop 8 bits de données
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0001 0014     UBRRH='\x00';
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0015     UBRRL='\x03';           // 0x03 = 250000 Bauds
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 0016 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;void debutTrameDmx( void ) {
; 0001 0018 void debutTrameDmx( void ) {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 0019     UCSRB='\x00';           // disable Tx port serie pour avoir controle port D
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 001A     PORTD='\x00';           // bit1 portD etait a 1 -> passe a 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 001B     delay_us(150);           // temps mini dmx break
;PCODE: $0000003C VOL: 0
; 0001 001C     PORTD='\x02';           // bit1 portD passe a 1
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 001D     delay_us(8);            // temps mini dmx mark after break
;PCODE: $0000003F VOL: 0
; 0001 001E                             // pret pour envoi serie
; 0001 001F }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;void envoiTrameDmx( void ) {
; 0001 0021 void envoiTrameDmx( void ) {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0022     char i;
; 0001 0023 
; 0001 0024     for( i=0; i<7; i++ ) {
;PCODE: $00000044 VOL: 0
;	i -> R17
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0025         while ( !( UCSRA & (1<<UDRE)) )     // port serie dispo pour envoi ?
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 0026             ;                               // non alors attend
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 0027         UDR = tabEnvoiDmx[i];               // oui alors charge la valeur dans port serie
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 0028     }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 0029 }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;
;void finTrameDmx( void ) {
; 0001 002B void finTrameDmx( void ) {
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 002C     UCSRB='\x00';           // arret port serie pour envoi
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 002D     PORTD='\x02';           // passe le bit1 a 1 pour etat repos dmx fin de trame
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 002E }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;
;void envoiDmx( void ) {     // show must go on
; 0001 0030 void envoiDmx( void ) {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 0031     debutTrameDmx();
;PCODE: $0000006B VOL: 0
; 0001 0032     initPortSerieDmx();
;PCODE: $0000006C VOL: 0
; 0001 0033     envoiTrameDmx();
;PCODE: $0000006D VOL: 0
; 0001 0034     finTrameDmx();
;PCODE: $0000006E VOL: 0
; 0001 0035 }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;
;void couleurDmx( char rouge, char vert, char bleu) {
; 0001 0037 void couleurDmx( char rouge, char vert, char bleu) {
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0038     tabEnvoiDmx[0]='\0';    // toujours 0 pour start code dmx
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;	rouge -> R19
;	vert -> R16
;	bleu -> R17
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 0039     tabEnvoiDmx[1]=rouge;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 003A     tabEnvoiDmx[2]=vert;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 003B     tabEnvoiDmx[3]=bleu;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 003C     envoiDmx();
;PCODE: $00000084 VOL: 0
; 0001 003D }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;
;void lyreDmx( char x, char y) {
; 0001 003F void lyreDmx( char x, char y) {
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 0040     tabEnvoiDmx[0]='\0';    // toujours 0 pour start code dmx
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;	x -> R16
;	y -> R17
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 0041     tabEnvoiDmx[4]=x;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0001 0042     tabEnvoiDmx[5]=y;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 0043     envoiDmx();
;PCODE: $00000097 VOL: 0
; 0001 0044 }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;
