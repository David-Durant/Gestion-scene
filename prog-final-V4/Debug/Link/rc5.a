;/* rc5.c                                     */
;/* fonctions pour le protocole commande rc5  */
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;
;int basculeBitValeur=0;         // compteur incremente a chaque fois - sert pour le bit bascule
;
;
;void rc5Bit1L( void ) {
; 0002 000B void rc5Bit1L( void ) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 000C     char i;
; 0002 000D 
; 0002 000E //  PORTB='\0';
; 0002 000F     delay_us( 889 );
;PCODE: $0000000F VOL: 0
;	i -> R17
;PCODE: $00000010 VOL: 0
; 0002 0010     for( i=0 ; i<32 ; i++ ) {   // 889us mesurees
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0002 0011           PORTB = 1;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 0012           delay_us(7);          // 7us  mesurees
;PCODE: $0000001C VOL: 0
; 0002 0013           PORTB = 0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0002 0014           delay_us(21);         // plus 21 us mesurees
;PCODE: $0000001F VOL: 0
; 0002 0015     }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0002 0016 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;
;void rc5Bit0L( void ) {
; 0002 0018 void rc5Bit0L( void ) {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 0019     char i;
; 0002 001A 
; 0002 001B     for( i=0 ; i<32 ; i++ ) {   // 889us mesurees
;PCODE: $0000002A VOL: 0
;	i -> R17
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0002 001C           PORTB = 1;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 001D           delay_us(7);          // 7us  mesurees
;PCODE: $00000036 VOL: 0
; 0002 001E           PORTB = 0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0002 001F           delay_us(21);         // plus 21 us mesurees
;PCODE: $00000039 VOL: 0
; 0002 0020     }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0002 0021     delay_us( 889 );
;PCODE: $0000003F VOL: 0
; 0002 0022 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;void rc5BasculeBit( void ) {
; 0002 0024 void rc5BasculeBit( void ) {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 0025     char i;
; 0002 0026 
; 0002 0027     if( basculeBitValeur%2==0 ) {   // modulo a 2 = reste de la division par 2 : soit 0 soit 1 soit 0 soit 1 etc
;PCODE: $00000045 VOL: 0
;	i -> R17
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 0028         delay_us( 889 );
;PCODE: $0000004B VOL: 0
; 0002 0029         for( i=0 ; i<32 ; i++ ) {   // 889us mesurees
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 002A            PORTB = 1;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 002B            delay_us(7);             // 7us  mesurees
;PCODE: $00000057 VOL: 0
; 0002 002C            PORTB = 0;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 002D            delay_us(21);            // plus 21 us mesurees
;PCODE: $0000005A VOL: 0
; 0002 002E         }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0002 002F     } else {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0002 0030         for( i=0 ; i<32 ; i++ ) {   // 889us mesurees
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0002 0031               PORTB = 1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0002 0032               delay_us(7);          // 7us  mesurees
;PCODE: $0000006D VOL: 0
; 0002 0033               PORTB = 0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0002 0034               delay_us(21);         // plus 21 us mesurees
;PCODE: $00000070 VOL: 0
; 0002 0035         }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0002 0036         delay_us( 889 );
;PCODE: $00000076 VOL: 0
; 0002 0037     }
;PCODE: $00000077 VOL: 0
; 0002 0038     basculeBitValeur++;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0002 0039 }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;
;
;// adresse = 0x14   pour lecteur CD
;// adresse = 0x10   pour ampli
;
;
;void rc5CmdOn( void ) {
; 0002 0040 void rc5CmdOn( void ) {
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0002 0041     rc5Bit1L();     // bit start 1er
;PCODE: $00000080 VOL: 0
; 0002 0042     rc5Bit1L();     // bit start 2sd
;PCODE: $00000081 VOL: 0
; 0002 0043     rc5BasculeBit();    // bit commutation
;PCODE: $00000082 VOL: 0
; 0002 0044     rc5Bit1L();     // adresse bit 4    adresse=0x14 (20 en décimal)
;PCODE: $00000083 VOL: 0
; 0002 0045     rc5Bit0L();     // adresse bit 3
;PCODE: $00000084 VOL: 0
; 0002 0046     rc5Bit1L();     // adresse bit 2
;PCODE: $00000085 VOL: 0
; 0002 0047     rc5Bit0L();     // adresse bit 1
;PCODE: $00000086 VOL: 0
; 0002 0048     rc5Bit0L();     // adresse bit 0
;PCODE: $00000087 VOL: 0
; 0002 0049     rc5Bit0L();     // commande bit 5   commande=0x0C
;PCODE: $00000088 VOL: 0
; 0002 004A     rc5Bit0L();     // commande bit 4
;PCODE: $00000089 VOL: 0
; 0002 004B     rc5Bit1L();     // commande bit 3
;PCODE: $0000008A VOL: 0
; 0002 004C     rc5Bit1L();     // commande bit 2
;PCODE: $0000008B VOL: 0
; 0002 004D     rc5Bit0L();     // commande bit 1
;PCODE: $0000008C VOL: 0
; 0002 004E     rc5Bit0L();     // commande bit 0
;PCODE: $0000008D VOL: 0
; 0002 004F }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;
;void rc5CmdOn2( void ) {
; 0002 0051 void rc5CmdOn2( void ) {
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0002 0052     rc5Bit1L();     // bit start 1er
;PCODE: $00000092 VOL: 0
; 0002 0053     rc5Bit1L();     // bit start 2sd
;PCODE: $00000093 VOL: 0
; 0002 0054     rc5BasculeBit();    // bit commutation
;PCODE: $00000094 VOL: 0
; 0002 0055     rc5Bit1L();     // adresse bit 4    adresse=0x10
;PCODE: $00000095 VOL: 0
; 0002 0056     rc5Bit0L();     // adresse bit 3
;PCODE: $00000096 VOL: 0
; 0002 0057     rc5Bit0L();     // adresse bit 2
;PCODE: $00000097 VOL: 0
; 0002 0058     rc5Bit0L();     // adresse bit 1
;PCODE: $00000098 VOL: 0
; 0002 0059     rc5Bit0L();     // adresse bit 0
;PCODE: $00000099 VOL: 0
; 0002 005A     rc5Bit0L();     // commande bit 5   commande=0x0C
;PCODE: $0000009A VOL: 0
; 0002 005B     rc5Bit0L();     // commande bit 4
;PCODE: $0000009B VOL: 0
; 0002 005C     rc5Bit1L();     // commande bit 3
;PCODE: $0000009C VOL: 0
; 0002 005D     rc5Bit1L();     // commande bit 2
;PCODE: $0000009D VOL: 0
; 0002 005E     rc5Bit0L();     // commande bit 1
;PCODE: $0000009E VOL: 0
; 0002 005F     rc5Bit0L();     // commande bit 0
;PCODE: $0000009F VOL: 0
; 0002 0060 }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;
;void rc5CmdOff( void ) {
; 0002 0062 void rc5CmdOff( void ) {
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0002 0063     rc5Bit1L();     // bit start 1er
;PCODE: $000000A4 VOL: 0
; 0002 0064     rc5Bit1L();     // bit start 2sd
;PCODE: $000000A5 VOL: 0
; 0002 0065     rc5BasculeBit();    // bit commutation
;PCODE: $000000A6 VOL: 0
; 0002 0066     rc5Bit1L();     // adresse bit 4    adresse=0x14 (20 en décimal)
;PCODE: $000000A7 VOL: 0
; 0002 0067     rc5Bit0L();     // adresse bit 3
;PCODE: $000000A8 VOL: 0
; 0002 0068     rc5Bit1L();     // adresse bit 2
;PCODE: $000000A9 VOL: 0
; 0002 0069     rc5Bit0L();     // adresse bit 1
;PCODE: $000000AA VOL: 0
; 0002 006A     rc5Bit0L();     // adresse bit 0
;PCODE: $000000AB VOL: 0
; 0002 006B     rc5Bit0L();     // commande bit 5   commande=0x0C
;PCODE: $000000AC VOL: 0
; 0002 006C     rc5Bit0L();     // commande bit 4
;PCODE: $000000AD VOL: 0
; 0002 006D     rc5Bit1L();     // commande bit 3
;PCODE: $000000AE VOL: 0
; 0002 006E     rc5Bit1L();     // commande bit 2
;PCODE: $000000AF VOL: 0
; 0002 006F     rc5Bit0L();     // commande bit 1
;PCODE: $000000B0 VOL: 0
; 0002 0070     rc5Bit0L();     // commande bit 0
;PCODE: $000000B1 VOL: 0
; 0002 0071 }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;
;void rc5CmdOff2( void ) {
; 0002 0073 void rc5CmdOff2( void ) {
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0002 0074     rc5Bit1L();     // bit start 1er
;PCODE: $000000B6 VOL: 0
; 0002 0075     rc5Bit1L();     // bit start 2sd
;PCODE: $000000B7 VOL: 0
; 0002 0076     rc5BasculeBit();    // bit commutation
;PCODE: $000000B8 VOL: 0
; 0002 0077     rc5Bit1L();     // adresse bit 4    adresse=0x10
;PCODE: $000000B9 VOL: 0
; 0002 0078     rc5Bit0L();     // adresse bit 3
;PCODE: $000000BA VOL: 0
; 0002 0079     rc5Bit0L();     // adresse bit 2
;PCODE: $000000BB VOL: 0
; 0002 007A     rc5Bit0L();     // adresse bit 1
;PCODE: $000000BC VOL: 0
; 0002 007B     rc5Bit0L();     // adresse bit 0
;PCODE: $000000BD VOL: 0
; 0002 007C     rc5Bit0L();     // commande bit 5   commande=0x0C
;PCODE: $000000BE VOL: 0
; 0002 007D     rc5Bit0L();     // commande bit 4
;PCODE: $000000BF VOL: 0
; 0002 007E     rc5Bit1L();     // commande bit 3
;PCODE: $000000C0 VOL: 0
; 0002 007F     rc5Bit1L();     // commande bit 2
;PCODE: $000000C1 VOL: 0
; 0002 0080     rc5Bit0L();     // commande bit 1
;PCODE: $000000C2 VOL: 0
; 0002 0081     rc5Bit0L();     // commande bit 0
;PCODE: $000000C3 VOL: 0
; 0002 0082 }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;
;void rc5CmdMute( void ) {
; 0002 0084 void rc5CmdMute( void ) {
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0002 0085     rc5Bit1L();     // bit start 1er
;PCODE: $000000C8 VOL: 0
; 0002 0086     rc5Bit1L();     // bit start 2sd
;PCODE: $000000C9 VOL: 0
; 0002 0087     rc5BasculeBit();     // bit commutation
;PCODE: $000000CA VOL: 0
; 0002 0088     rc5Bit1L();     // adresse bit 4    adresse=0x10
;PCODE: $000000CB VOL: 0
; 0002 0089     rc5Bit0L();     // adresse bit 3
;PCODE: $000000CC VOL: 0
; 0002 008A     rc5Bit0L();     // adresse bit 2
;PCODE: $000000CD VOL: 0
; 0002 008B     rc5Bit0L();     // adresse bit 1
;PCODE: $000000CE VOL: 0
; 0002 008C     rc5Bit0L();     // adresse bit 0
;PCODE: $000000CF VOL: 0
; 0002 008D     rc5Bit0L();     // commande bit 5   commande=0x0D
;PCODE: $000000D0 VOL: 0
; 0002 008E     rc5Bit0L();     // commande bit 4
;PCODE: $000000D1 VOL: 0
; 0002 008F     rc5Bit1L();     // commande bit 3
;PCODE: $000000D2 VOL: 0
; 0002 0090     rc5Bit1L();     // commande bit 2
;PCODE: $000000D3 VOL: 0
; 0002 0091     rc5Bit0L();     // commande bit 1
;PCODE: $000000D4 VOL: 0
; 0002 0092     rc5Bit1L();     // commande bit 0
;PCODE: $000000D5 VOL: 0
; 0002 0093 }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;
;void rc5CmdNomute( void ) {
; 0002 0095 void rc5CmdNomute( void ) {
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0002 0096     rc5Bit1L();     // bit start 1er
;PCODE: $000000DA VOL: 0
; 0002 0097     rc5Bit1L();     // bit start 2sd
;PCODE: $000000DB VOL: 0
; 0002 0098     rc5BasculeBit();     // bit commutation
;PCODE: $000000DC VOL: 0
; 0002 0099     rc5Bit1L();     // adresse bit 4    adresse=0x10
;PCODE: $000000DD VOL: 0
; 0002 009A     rc5Bit0L();     // adresse bit 3
;PCODE: $000000DE VOL: 0
; 0002 009B     rc5Bit0L();     // adresse bit 2
;PCODE: $000000DF VOL: 0
; 0002 009C     rc5Bit0L();     // adresse bit 1
;PCODE: $000000E0 VOL: 0
; 0002 009D     rc5Bit0L();     // adresse bit 0
;PCODE: $000000E1 VOL: 0
; 0002 009E     rc5Bit0L();     // commande bit 5   commande=0x0D
;PCODE: $000000E2 VOL: 0
; 0002 009F     rc5Bit0L();     // commande bit 4
;PCODE: $000000E3 VOL: 0
; 0002 00A0     rc5Bit1L();     // commande bit 3
;PCODE: $000000E4 VOL: 0
; 0002 00A1     rc5Bit1L();     // commande bit 2
;PCODE: $000000E5 VOL: 0
; 0002 00A2     rc5Bit0L();     // commande bit 1
;PCODE: $000000E6 VOL: 0
; 0002 00A3     rc5Bit1L();     // commande bit 0
;PCODE: $000000E7 VOL: 0
; 0002 00A4 }
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;
;void rc5CmdSoundUp( void ) {
; 0002 00A6 void rc5CmdSoundUp( void ) {
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0002 00A7     rc5Bit1L();     // bit start 1er
;PCODE: $000000EC VOL: 0
; 0002 00A8     rc5Bit1L();     // bit start 2sd
;PCODE: $000000ED VOL: 0
; 0002 00A9     rc5BasculeBit();     // bit commutation
;PCODE: $000000EE VOL: 0
; 0002 00AA     rc5Bit1L();     // adresse bit 4    adresse=0x10
;PCODE: $000000EF VOL: 0
; 0002 00AB     rc5Bit0L();     // adresse bit 3
;PCODE: $000000F0 VOL: 0
; 0002 00AC     rc5Bit0L();     // adresse bit 2
;PCODE: $000000F1 VOL: 0
; 0002 00AD     rc5Bit0L();     // adresse bit 1
;PCODE: $000000F2 VOL: 0
; 0002 00AE     rc5Bit0L();     // adresse bit 0
;PCODE: $000000F3 VOL: 0
; 0002 00AF     rc5Bit0L();     // commande bit 5   commande=0x10
;PCODE: $000000F4 VOL: 0
; 0002 00B0     rc5Bit1L();     // commande bit 4
;PCODE: $000000F5 VOL: 0
; 0002 00B1     rc5Bit0L();     // commande bit 3
;PCODE: $000000F6 VOL: 0
; 0002 00B2     rc5Bit0L();     // commande bit 2
;PCODE: $000000F7 VOL: 0
; 0002 00B3     rc5Bit0L();     // commande bit 1
;PCODE: $000000F8 VOL: 0
; 0002 00B4     rc5Bit0L();     // commande bit 0
;PCODE: $000000F9 VOL: 0
; 0002 00B5 }
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;
;void rc5CmdSoundDown( void ) {
; 0002 00B7 void rc5CmdSoundDown( void ) {
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0002 00B8     rc5Bit1L();     // bit start 1er
;PCODE: $000000FE VOL: 0
; 0002 00B9     rc5Bit1L();     // bit start 2sd
;PCODE: $000000FF VOL: 0
; 0002 00BA     rc5BasculeBit();     // bit commutation
;PCODE: $00000100 VOL: 0
; 0002 00BB     rc5Bit1L();     // adresse bit 4    adresse=0x10
;PCODE: $00000101 VOL: 0
; 0002 00BC     rc5Bit0L();     // adresse bit 3
;PCODE: $00000102 VOL: 0
; 0002 00BD     rc5Bit0L();     // adresse bit 2
;PCODE: $00000103 VOL: 0
; 0002 00BE     rc5Bit0L();     // adresse bit 1
;PCODE: $00000104 VOL: 0
; 0002 00BF     rc5Bit0L();     // adresse bit 0
;PCODE: $00000105 VOL: 0
; 0002 00C0     rc5Bit0L();     // commande bit 5   commande=0x11
;PCODE: $00000106 VOL: 0
; 0002 00C1     rc5Bit1L();     // commande bit 4
;PCODE: $00000107 VOL: 0
; 0002 00C2     rc5Bit0L();     // commande bit 3
;PCODE: $00000108 VOL: 0
; 0002 00C3     rc5Bit0L();     // commande bit 2
;PCODE: $00000109 VOL: 0
; 0002 00C4     rc5Bit0L();     // commande bit 1
;PCODE: $0000010A VOL: 0
; 0002 00C5     rc5Bit1L();     // commande bit 0
;PCODE: $0000010B VOL: 0
; 0002 00C6 }
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;
;void rc5CmdPlay( void ) {
; 0002 00C8 void rc5CmdPlay( void ) {
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0002 00C9     rc5Bit1L();     // bit start 1er
;PCODE: $00000110 VOL: 0
; 0002 00CA     rc5Bit1L();     // bit start 2sd
;PCODE: $00000111 VOL: 0
; 0002 00CB     rc5BasculeBit();     // bit commutation
;PCODE: $00000112 VOL: 0
; 0002 00CC     rc5Bit1L();     // adresse bit 4    adresse=0x14
;PCODE: $00000113 VOL: 0
; 0002 00CD     rc5Bit0L();     // adresse bit 3
;PCODE: $00000114 VOL: 0
; 0002 00CE     rc5Bit1L();     // adresse bit 2
;PCODE: $00000115 VOL: 0
; 0002 00CF     rc5Bit0L();     // adresse bit 1
;PCODE: $00000116 VOL: 0
; 0002 00D0     rc5Bit0L();     // adresse bit 0
;PCODE: $00000117 VOL: 0
; 0002 00D1     rc5Bit1L();     // commande bit 5   commande=0x35
;PCODE: $00000118 VOL: 0
; 0002 00D2     rc5Bit1L();     // commande bit 4
;PCODE: $00000119 VOL: 0
; 0002 00D3     rc5Bit0L();     // commande bit 3
;PCODE: $0000011A VOL: 0
; 0002 00D4     rc5Bit1L();     // commande bit 2
;PCODE: $0000011B VOL: 0
; 0002 00D5     rc5Bit0L();     // commande bit 1
;PCODE: $0000011C VOL: 0
; 0002 00D6     rc5Bit1L();     // commande bit 0
;PCODE: $0000011D VOL: 0
; 0002 00D7 }
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;
;void rc5CmdStop( void ) {
; 0002 00D9 void rc5CmdStop( void ) {
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0002 00DA     rc5Bit1L();     // bit start 1er
;PCODE: $00000122 VOL: 0
; 0002 00DB     rc5Bit1L();     // bit start 2sd
;PCODE: $00000123 VOL: 0
; 0002 00DC     rc5BasculeBit();     // bit commutation
;PCODE: $00000124 VOL: 0
; 0002 00DD     rc5Bit1L();     // adresse bit 4    adresse=0x14
;PCODE: $00000125 VOL: 0
; 0002 00DE     rc5Bit0L();     // adresse bit 3
;PCODE: $00000126 VOL: 0
; 0002 00DF     rc5Bit1L();     // adresse bit 2
;PCODE: $00000127 VOL: 0
; 0002 00E0     rc5Bit0L();     // adresse bit 1
;PCODE: $00000128 VOL: 0
; 0002 00E1     rc5Bit0L();     // adresse bit 0
;PCODE: $00000129 VOL: 0
; 0002 00E2     rc5Bit1L();     // commande bit 5   commande=0x36
;PCODE: $0000012A VOL: 0
; 0002 00E3     rc5Bit1L();     // commande bit 4
;PCODE: $0000012B VOL: 0
; 0002 00E4     rc5Bit0L();     // commande bit 3
;PCODE: $0000012C VOL: 0
; 0002 00E5     rc5Bit1L();     // commande bit 2
;PCODE: $0000012D VOL: 0
; 0002 00E6     rc5Bit1L();     // commande bit 1
;PCODE: $0000012E VOL: 0
; 0002 00E7     rc5Bit0L();     // commande bit 0
;PCODE: $0000012F VOL: 0
; 0002 00E8 }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;
;void rc5CmdPause( void ) {
; 0002 00EA void rc5CmdPause( void ) {
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0002 00EB     rc5Bit1L();     // bit start 1er
;PCODE: $00000134 VOL: 0
; 0002 00EC     rc5Bit1L();     // bit start 2sd
;PCODE: $00000135 VOL: 0
; 0002 00ED     rc5BasculeBit();     // bit commutation
;PCODE: $00000136 VOL: 0
; 0002 00EE     rc5Bit1L();     // adresse bit 4    adresse=0x14 (20 en décimal)
;PCODE: $00000137 VOL: 0
; 0002 00EF     rc5Bit0L();     // adresse bit 3
;PCODE: $00000138 VOL: 0
; 0002 00F0     rc5Bit1L();     // adresse bit 2
;PCODE: $00000139 VOL: 0
; 0002 00F1     rc5Bit0L();     // adresse bit 1
;PCODE: $0000013A VOL: 0
; 0002 00F2     rc5Bit0L();     // adresse bit 0
;PCODE: $0000013B VOL: 0
; 0002 00F3     rc5Bit1L();     // commande bit 5   commande=0x30
;PCODE: $0000013C VOL: 0
; 0002 00F4     rc5Bit1L();     // commande bit 4
;PCODE: $0000013D VOL: 0
; 0002 00F5     rc5Bit0L();     // commande bit 3
;PCODE: $0000013E VOL: 0
; 0002 00F6     rc5Bit0L();     // commande bit 2
;PCODE: $0000013F VOL: 0
; 0002 00F7     rc5Bit0L();     // commande bit 1
;PCODE: $00000140 VOL: 0
; 0002 00F8     rc5Bit0L();     // commande bit 0
;PCODE: $00000141 VOL: 0
; 0002 00F9 }
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;
;void rc5CmdNext(void ) {
; 0002 00FB void rc5CmdNext(void ) {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0002 00FC     rc5Bit1L();     // bit start 1er
;PCODE: $00000146 VOL: 0
; 0002 00FD     rc5Bit1L();     // bit start 2sd
;PCODE: $00000147 VOL: 0
; 0002 00FE     rc5BasculeBit();     // bit commutation
;PCODE: $00000148 VOL: 0
; 0002 00FF     rc5Bit1L();     // adresse bit 4    adresse=0x14 (20 en décimal)
;PCODE: $00000149 VOL: 0
; 0002 0100     rc5Bit0L();     // adresse bit 3
;PCODE: $0000014A VOL: 0
; 0002 0101     rc5Bit1L();     // adresse bit 2
;PCODE: $0000014B VOL: 0
; 0002 0102     rc5Bit0L();     // adresse bit 1
;PCODE: $0000014C VOL: 0
; 0002 0103     rc5Bit0L();     // adresse bit 0
;PCODE: $0000014D VOL: 0
; 0002 0104     rc5Bit1L();     // commande bit 5   commande=0x20
;PCODE: $0000014E VOL: 0
; 0002 0105     rc5Bit0L();     // commande bit 4
;PCODE: $0000014F VOL: 0
; 0002 0106     rc5Bit0L();     // commande bit 3
;PCODE: $00000150 VOL: 0
; 0002 0107     rc5Bit0L();     // commande bit 2
;PCODE: $00000151 VOL: 0
; 0002 0108     rc5Bit0L();     // commande bit 1
;PCODE: $00000152 VOL: 0
; 0002 0109     rc5Bit0L();     // commande bit 0
;PCODE: $00000153 VOL: 0
; 0002 010A }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;
;void rc5CmdPrev( void ) {
; 0002 010C void rc5CmdPrev( void ) {
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0002 010D     rc5Bit1L();     // bit start 1er
;PCODE: $00000158 VOL: 0
; 0002 010E     rc5Bit1L();     // bit start 2sd
;PCODE: $00000159 VOL: 0
; 0002 010F     rc5BasculeBit();     // bit commutation
;PCODE: $0000015A VOL: 0
; 0002 0110     rc5Bit1L();     // adresse bit 4    adresse=0x14 (20 en décimal)
;PCODE: $0000015B VOL: 0
; 0002 0111     rc5Bit0L();     // adresse bit 3
;PCODE: $0000015C VOL: 0
; 0002 0112     rc5Bit1L();     // adresse bit 2
;PCODE: $0000015D VOL: 0
; 0002 0113     rc5Bit0L();     // adresse bit 1
;PCODE: $0000015E VOL: 0
; 0002 0114     rc5Bit0L();     // adresse bit 0
;PCODE: $0000015F VOL: 0
; 0002 0115     rc5Bit1L();     // commande bit 5   commande=0x21
;PCODE: $00000160 VOL: 0
; 0002 0116     rc5Bit0L();     // commande bit 4
;PCODE: $00000161 VOL: 0
; 0002 0117     rc5Bit0L();     // commande bit 3
;PCODE: $00000162 VOL: 0
; 0002 0118     rc5Bit0L();     // commande bit 2
;PCODE: $00000163 VOL: 0
; 0002 0119     rc5Bit0L();     // commande bit 1
;PCODE: $00000164 VOL: 0
; 0002 011A     rc5Bit1L();     // commande bit 0
;PCODE: $00000165 VOL: 0
; 0002 011B }
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;
