;/*
; * essai-dmx-envoi.c
; *
; * Created: 21/05/2018 19:51:29
; * Author: durant
; */
;
;// dmx.c
;// fonctions d'envoi sur le dmx
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;
;char tabEnvoiDmx[6];      // start-code + 5 canaux dmx
;
;void initDmx( void ) {
; 0000 0011 void initDmx( void ) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0012     char i;
; 0000 0013     DDRD ='\x02';
;PCODE: $0000000F VOL: 0
;	i -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0014     PORTD='\x02';                   // pour dmx etat repos
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0015     for( i=0; i<7; i++)           // raz tabEnvoiDmx
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0016         tabEnvoiDmx[i]='\0';
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0017 }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;void initPortSerieDmx( void ) {
; 0000 0019 void initPortSerieDmx( void ) {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 001A     UCSRB='\x08';           // active transmission
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 001B     UCSRC='\x8E';           // asynchrone 2 bits de stop 8 bits de données
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 001C     UBRRH='\x00';
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 001D     UBRRL='\x03';           // 0x03 = 250000 Bauds
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001E }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;
;void debutTrameDmx( void ) {
; 0000 0020 void debutTrameDmx( void ) {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0021     UCSRB='\x00';           // disable Tx port serie pour avoir controle port D
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0022     PORTD='\x00';           // bit1 portD etait a 1 -> passe a 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0023     delay_us(150);           // temps mini dmx break
;PCODE: $0000003C VOL: 0
; 0000 0024     PORTD='\x02';           // bit1 portD passe a 1
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0025     delay_us(8);            // temps mini dmx mark after break
;PCODE: $0000003F VOL: 0
; 0000 0026                             // pret pour envoi serie
; 0000 0027 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;void envoiTrameDmx( void ) {
; 0000 0029 void envoiTrameDmx( void ) {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 002A     char i;
; 0000 002B 
; 0000 002C     for( i=0; i<7; i++ ) {
;PCODE: $00000044 VOL: 0
;	i -> R17
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 002D         while ( !( UCSRA & (1<<UDRE)) )     // port serie dispo pour envoi ?
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 002E             ;                               // non alors attend
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 002F         UDR = tabEnvoiDmx[i];               // oui alors charge la valeur dans port serie
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0030     }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0031 }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;
;void finTrameDmx( void ) {
; 0000 0033 void finTrameDmx( void ) {
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0034     UCSRB='\x00';           // arret port serie pour envoi
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0035     PORTD='\x02';           // passe le bit1 a 1 pour etat repos dmx fin de trame
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0036 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;
;void envoiDmx( void ) {     // show must go on
; 0000 0038 void envoiDmx( void ) {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0039     debutTrameDmx();
;PCODE: $0000006B VOL: 0
; 0000 003A     initPortSerieDmx();
;PCODE: $0000006C VOL: 0
; 0000 003B     envoiTrameDmx();
;PCODE: $0000006D VOL: 0
; 0000 003C     finTrameDmx();
;PCODE: $0000006E VOL: 0
; 0000 003D }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;
;void couleurDmx( char rouge, char vert, char bleu) {
; 0000 003F void couleurDmx( char rouge, char vert, char bleu) {
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0040     tabEnvoiDmx[0]='\0';    // toujours 0 pour start code dmx
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;	rouge -> R19
;	vert -> R16
;	bleu -> R17
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0041     tabEnvoiDmx[1]=rouge;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0042     tabEnvoiDmx[2]=vert;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0043     tabEnvoiDmx[3]=bleu;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0044     envoiDmx();
;PCODE: $00000084 VOL: 0
; 0000 0045     lcd_putchar( '.' );
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0046 }
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;
;void initLCD( void ) {
; 0000 0049 void initLCD( void ) {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 004A     PORTA=0x00;         // lcd sur le port A
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 004B     DDRA=0xFF;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 004C     lcd_init(16);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 004D     lcd_clear();
;PCODE: $00000093 VOL: 0
; 0000 004E     lcd_putsf( "Test dmx" );
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 004F }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;void main(void) {
; 0000 0051 void main(void) {
;PCODE: $00000099 VOL: 0
; 0000 0052     initLCD();
;PCODE: $0000009A VOL: 0
; 0000 0053     initDmx();
;PCODE: $0000009B VOL: 0
; 0000 0054     while( 1 ) {
;PCODE: $0000009C VOL: 0
; 0000 0055         couleurDmx( '\xFF', '\x00', '\xFF' );
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0056         delay_ms(500);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0057     }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0058 }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
